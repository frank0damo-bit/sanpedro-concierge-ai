import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import { Slider } from "@/components/ui/slider";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar as CalendarIcon, Minus, Plus } from "lucide-react";
import { DateRange } from "react-day-picker";
import { format } from "date-fns";
import { useToast } from "@/hooks/use-toast";

interface TripBuilderFormProps {
  onClose: () => void;
}

export function TripBuilderForm({ onClose }: TripBuilderFormProps) {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [travelers, setTravelers] = useState(2);
  const [dates, setDates] = useState<DateRange | undefined>();
  const [budget, setBudget] = useState([500, 5000]);
  const [prompt, setPrompt] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    if (!prompt.trim()) {
      toast({
        title: "Please describe your trip.",
        variant: "destructive"
      });
      setIsSubmitting(false);
      return;
    }
    
    const formData = {
      prompt,
      travelers,
      dates: {
        from: dates?.from ? format(dates.from, 'yyyy-MM-dd') : null,
        to: dates?.to ? format(dates.to, 'yyyy-MM-dd') : null,
      },
      budget: {
        min: budget[0],
        max: budget[1],
      }
    };

    // In a real app, you would now send this data to your backend/Supabase Function
    // which then calls the OpenAI API.
    
    // For now, we will simulate a delay and navigate to the results page.
    setTimeout(() => {
      onClose();
      navigate('/trip-package', { state: { formData } });
    }, 1500);
  };

  return (
    <form onSubmit={handleSubmit} className="grid gap-6 py-4">
      <div>
        <Label htmlFor="prompt" className="text-lg font-semibold">Describe your ideal trip</Label>
        <Textarea 
          id="prompt" 
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., A relaxing 7-day beach getaway with some snorkeling and fine dining. We love sunsets and local food." 
          className="mt-2 min-h-[100px]"
        />
      </div>

      <div className="grid grid-cols-2 gap-6">
        <div>
          <Label className="text-lg font-semibold">Travelers</Label>
          <div className="flex items-center gap-2 mt-2">
            <Button type="button" variant="outline" size="icon" onClick={() => setTravelers(p => Math.max(1, p - 1))}><Minus className="h-4 w-4"/></Button>
            <Input type="text" value={`${travelers} traveler(s)`} readOnly className="text-center" />
            <Button type="button" variant="outline" size="icon" onClick={() => setTravelers(p => p + 1)}><Plus className="h-4 w-4"/></Button>
          </div>
        </div>
        <div>
          <Label className="text-lg font-semibold">Dates</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="w-full justify-start text-left font-normal mt-2">
                <CalendarIcon className="mr-2 h-4 w-4" />
                {dates?.from ? (
                  dates.to ? `${format(dates.from, "LLL dd, y")} - ${format(dates.to, "LLL dd, y")}` : format(dates.from, "LLL dd, y")
                ) : <span>Pick a date range</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar mode="range" selected={dates} onSelect={setDates} initialFocus />
            </PopoverContent>
          </Popover>
        </div>
      </div>

      <div>
        <Label className="text-lg font-semibold">Price Range</Label>
        <div className="flex justify-between mt-2 text-sm text-muted-foreground">
          <span>${budget[0]}</span>
          <span>${budget[1]}+</span>
        </div>
        <Slider value={budget} onValueChange={setBudget} max={10000} min={500} step={100} className="mt-2" />
      </div>

      <Button type="submit" size="lg" className="w-full" disabled={isSubmitting}>
        {isSubmitting ? "Building Your Itinerary..." : "Create My Perfect Trip"}
      </Button>
    </form>
  );
}
